stages:
  ingest_kaggle:
    cmd: >
      python scripts/data_ingestion/descarga_kaggle_reviews.py
      --out data/landing/sephora/raw
    deps:
      - scripts/data_ingestion/descarga_kaggle_reviews.py
    outs:
      - data/landing/sephora/raw

  conversion_a_delta:
    cmd: >
      python scripts/data_cleaning/conversion_a_delta.py
      --input data/landing/sephora/raw
      --output data/landing/sephora/delta
    deps:
      - scripts/data_cleaning/conversion_a_delta.py
      - data/landing/sephora/raw
    outs:
      - data/landing/sephora/delta

  trusted_clean_driver:
    cmd: python scripts/data_cleaning/trusted_clean_driver.py --input data/landing/sephora/delta --output data/trusted/sephora_clean
    deps:
      - scripts/data_cleaning/trusted_clean_driver.py
      - scripts/data_cleaning/trusted_clean_single.py
      - data/landing/sephora/delta
    outs:
      - data/trusted/sephora_clean

  merge_trusted_reviews:
    cmd: python scripts/data_cleaning/merge_trusted_reviews.py --input-dir data/trusted/sephora_clean --output data/trusted/reviews_full
    deps:
      - scripts/data_cleaning/merge_trusted_reviews.py
      - data/trusted/sephora_clean
    outs:
      - data/trusted/reviews_full

  # === EDA FULL ===
  eda_full:
    cmd: >
      python scripts/EDA/eda_reviews.py
      --input data/trusted/reviews_full
      --outdir reports/eda/full
      --tokenizer albert-base-v2
    deps:
      - scripts/EDA/eda_reviews.py
      - data/trusted/reviews_full
      - params.yaml
    outs:
      - reports/eda/full

  # === SAMPLE ESTRATIFICADO / BALANCEADO ===
  trusted_sample_30:
    cmd: >
      python scripts/data_cleaning/sample_reviews.py
      --input  data/trusted/reviews_full
      --output data/trusted/reviews_sample_30pct
      --frac ${sampling.frac}
      --by ${sampling.by}
      --format ${sampling.format}
      --seed ${sampling.seed}
      --coalesce ${sampling.coalesce}
      --balance ${sampling.balance}
    deps:
      - scripts/data_cleaning/sample_reviews.py
      - data/trusted/reviews_full
    outs:
      - data/trusted/reviews_sample_30pct
    params:
      - sampling

  # === EDA DEL SAMPLE ===
  eda_sample_30:
    cmd: >
      python scripts/EDA/eda_reviews.py
      --input data/trusted/reviews_sample_30pct
      --outdir reports/eda/sample_30
      --tokenizer albert-base-v2
    deps:
      - scripts/EDA/eda_reviews.py
      - data/trusted/reviews_sample_30pct
      - params.yaml
    outs:
      - reports/eda/sample_30

  # === COMPARATIVA FULL vs SAMPLE (parametrizada) ===
  eda_compare_full_vs_30:
    cmd: >
      python scripts/EDA/eda_compare.py
      --a ${eda_compare_full_vs_30.a}
      --b ${eda_compare_full_vs_30.b}
      --outdir ${eda_compare_full_vs_30.outdir}
      --by ${eda_compare_full_vs_30.by}
      --input-format ${eda_compare_full_vs_30.input_format}
      --tokenizer ${eda_compare_full_vs_30.tokenizer}
      --sample-rows ${eda_compare_full_vs_30.sample_rows}
      --max-len ${eda_compare_full_vs_30.max_len}
      --clip-tokens ${eda_compare_full_vs_30.clip_tokens}
      --silence-tokenizer-warnings ${eda_compare_full_vs_30.silence_tokenizer_warnings}
    deps:
      - scripts/EDA/eda_compare.py
      - ${eda_compare_full_vs_30.a}
      - ${eda_compare_full_vs_30.b}
    outs:
      - ${eda_compare_full_vs_30.outdir}
    params:
      - eda_compare_full_vs_30

  split_train_val_test:
    cmd: >
      python scripts/training/prepare_test_parquet.py
      --input  data/trusted/reviews_sample_30pct
      --outdir data/exploitation/modelos_input/sample_tvt
      --seed 42
    deps:
      - scripts/training/prepare_test_parquet.py
      - data/trusted/reviews_sample_30pct
      - params.yaml
    outs:
      - data/exploitation/modelos_input/sample_tvt

  train_albert_sample:
    cmd: >
      MLFLOW_RUN_NAME=albert_sample_30pct
      python scripts/training/train_albert_from_parquets.py
      --train data/exploitation/modelos_input/sample_tvt/train
      --val   data/exploitation/modelos_input/sample_tvt/val
      --model-out models/albert_sample_30pct
      --params params.yaml
    deps:
      - scripts/training/train_albert_from_parquets.py
      - data/exploitation/modelos_input/sample_tvt/train
      - data/exploitation/modelos_input/sample_tvt/val
      - params.yaml
    outs:
      - models/albert_sample_30pct

  evaluate_albert_sample:
    cmd: >
      PYTHONNOUSERSITE=1 TRANSFORMERS_NO_TF=1 TRANSFORMERS_NO_JAX=1 USE_TF=0 USE_JAX=0
      /home/pedro/MASTER_BIGDATA/venv/bin/python scripts/training/evaluate_albert.py
      --model_dir models/albert_sample_30pct
      --test_parquet data/exploitation/modelos_input/sample_tvt/test
      --output_dir reports/albert_sample_30pct/eval
    deps:
      - scripts/training/evaluate_albert.py
      - models/albert_sample_30pct
      - data/exploitation/modelos_input/sample_tvt/test
    outs:
      - reports/albert_sample_30pct/eval


  merge_reviews_product_info:
    cmd: >
      python scripts/data_cleaning/merge_reviews_product_info.py
      --reviews_path ${paths.reviews_full}
      --product_info_path ${paths.product_info}
      --output_path ${paths.merged_out}
      --input_format ${merge_reviews_product_info.input_format}
      --output_format ${merge_reviews_product_info.output_format}
      --repartition ${merge_reviews_product_info.repartition}
      --coalesce ${merge_reviews_product_info.coalesce}
      --product_prefix ${merge_reviews_product_info.product_prefix}
      --broadcast_product_info ${merge_reviews_product_info.broadcast_product_info}
    deps:
      - scripts/data_cleaning/merge_reviews_product_info.py
      - ${paths.reviews_full}
      - ${paths.product_info}
    outs:
      - ${paths.merged_out}
    params:
      - paths
      - merge_reviews_product_info.input_format
      - merge_reviews_product_info.output_format
      - merge_reviews_product_info.repartition
      - merge_reviews_product_info.coalesce
      - merge_reviews_product_info.product_prefix
      - merge_reviews_product_info.broadcast_product_info

  gen_aspects_json:
    cmd: >
      python -c "import os, json, yaml;
      d=yaml.safe_load(open('params.yaml'));
      os.makedirs('configs', exist_ok=True);
      json.dump(d['aspects_ontology_en'], open('configs/aspects_en.json','w'), ensure_ascii=False, indent=2)"
    deps:
      - params.yaml
    outs:
      - configs/aspects_en.json
    params:
      - aspects_ontology_en

  build_ate_trusted:
    cmd: >
      python scripts/absa/build_ate_trusted_from_ontology.py
      --input_path ${ate_trusted.input_path}
      --input_format ${ate_trusted.input_format}
      --text_col ${ate_trusted.text_col}
      --id_col ${ate_trusted.id_col}
      --ontology_json ${ate_trusted.ontology_json}
      --output_dir ${ate_trusted.output_dir}
      --train_filename ${ate_trusted.train_filename}
      --valid_filename ${ate_trusted.valid_filename}
      --sample_fraction ${ate_trusted.sample_fraction}
      --max_reviews ${ate_trusted.max_reviews}
      --train_valid_split ${ate_trusted.train_valid_split}
      --keep_neg_ratio ${ate_trusted.keep_neg_ratio}
      --seed ${ate_trusted.seed}
    deps:
      - scripts/absa/build_ate_trusted_from_ontology.py
      - ${ate_trusted.input_path}
      - ${ate_trusted.ontology_json}
    outs:
      - ${ate_train.train_path}
      - ${ate_train.valid_path}
    params:
      - ate_trusted
      - ate_train.train_path
      - ate_train.valid_path

  train_ate_bio:
    cmd: >
      python scripts/absa/train_ate_bio.py
      --train_path ${ate_train.train_path}
      --valid_path ${ate_train.valid_path}
      --model_name ${ate_train.model_name}
      --output_dir ${ate_train.output_dir}
      --epochs ${ate_train.epochs}
      --lr ${ate_train.lr}
      --batch_size ${ate_train.batch_size}
      --grad_accum ${ate_train.grad_accum}
      --max_length ${ate_train.max_length}
      --fp16 ${ate_train.fp16}
      --bf16 ${ate_train.bf16}
      --grad_checkpoint ${ate_train.grad_checkpoint}
      --dataloader_workers ${ate_train.dataloader_workers}
    deps:
      - scripts/absa/train_ate_bio.py
      - ${ate_train.train_path}
      - ${ate_train.valid_path}
    outs:
      - ${ate_train.output_dir}
    params:
      - ate_train

  infer_ate_spans:
    cmd: >
      python scripts/absa/infer_ate_spans.py
      --model_dir ${ate_infer.model_dir}
      --input_path ${ate_infer.input_path}
      --input_format ${ate_infer.input_format}
      --text_col ${ate_infer.text_col}
      --id_col ${ate_infer.id_col}
      --output_parquet ${ate_infer.output_parquet}
      --max_length ${ate_infer.max_length}
      --batch_size ${ate_infer.batch_size}
      --flush_rows ${ate_infer.flush_rows}
    deps:
      - scripts/absa/infer_ate_spans.py
      - ${ate_infer.input_path}
      - ${ate_infer.model_dir}
    outs:
      - ${ate_infer.output_parquet}
    params:
      - ate_infer

  map_ate_spans:
    cmd: >
      python scripts/absa/map_spans_to_ontology.py
      --spans_parquet ${ate_map.spans_parquet}
      --ontology_json ${ate_map.ontology_json}
      --output_parquet ${ate_map.output_parquet}
      --threshold ${ate_map.threshold}
    deps:
      - scripts/absa/map_spans_to_ontology.py
      - ${ate_map.spans_parquet}
      - ${ate_map.ontology_json}
    outs:
      - ${ate_map.output_parquet}
    params:
      - ate_map
  convert_delta_to_parquet_snapshot:
    cmd: python scripts/infer/convert_delta_to_parquet_snapshot.py --input_path data/trusted/reviews_full --output_path data/trusted/reviews_full_snapshot.parquet
    deps:
      - scripts/infer/convert_delta_to_parquet_snapshot.py
      - data/trusted/reviews_full
    outs:
      - data/trusted/reviews_full_snapshot.parquet
  infer_sentiment_full_pandas:
    cmd: >-
      python scripts/infer/infer_sentiment_full_pandas.py
      --model_dir models/albert_sample_30pct
      --input_parquet data/trusted/reviews_full_snapshot.parquet
      --output_parquet reports/albert_sample_30pct/infer_full_pandas/predictions.parquet
      --params_file params.yaml
    deps:
      - scripts/infer/infer_sentiment_full_pandas.py
      - models/albert_sample_30pct
      - data/trusted/reviews_full_snapshot.parquet
      - params.yaml
    outs:
      - reports/albert_sample_30pct/infer_full_pandas/predictions.parquet
    params:
      - infer_sentiment_full_pandas.batch_size
      - infer_sentiment_full_pandas.max_length
      - infer_sentiment_full_pandas.id_col
      - infer_sentiment_full_pandas.text_col

  absa_build_all:
    cmd: >
      python scripts/absa/build_absa_dataset.py
      --spans_parquet reports/absa/ate_spans.parquet
      --map_parquet   reports/absa/ate_spans_mapped.parquet
      --sentiment_parquet reports/albert_sample_30pct/infer_full_pandas/predictions.parquet
      --id_col review_id
      --span_text_col aspect_span
      --category_col aspect_norm
      --sentiment_col pred_3
      --output_dir reports/absa/final_all
    deps:
      - scripts/absa/build_absa_dataset.py
      - reports/absa/ate_spans.parquet
      - reports/absa/ate_spans_mapped.parquet
      - reports/albert_sample_30pct/infer_full_pandas/predictions.parquet
      - params.yaml
    outs:
      - reports/absa/final_all:
          persist: true

  train_rf_sample:
    cmd: >
      MLFLOW_RUN_NAME=rf_sample_30pct
      python scripts/training/train_random_forest.py
      --train data/exploitation/modelos_input/sample_tvt/train
      --val   data/exploitation/modelos_input/sample_tvt/val
      --model-out models/sentiment_rf_sample
      --params params.yaml
    deps:
      - scripts/training/train_random_forest.py
      - data/exploitation/modelos_input/sample_tvt/train
      - data/exploitation/modelos_input/sample_tvt/val
      - params.yaml
    outs:
      - models/sentiment_rf_sample
      - reports/sentiment_rf  

  evaluate_rf_sample:
    cmd: >
      python scripts/training/infer_random_forest.py
      --model-dir models/sentiment_rf_sample
      --input data/exploitation/modelos_input/sample_tvt/test
      --output-dir reports/sentiment_rf_sample/eval
      --text-col review_text --id-col review_id --use-extra 1
      &&
      python scripts/evaluation/metrics_overall.py
      --preds reports/sentiment_rf_sample/eval/test_predictions.parquet
      --out_dir reports/sentiment_rf_sample/eval
    deps:
      - scripts/training/infer_random_forest.py
      - scripts/evaluation/metrics_overall.py
      - models/sentiment_rf_sample
      - data/exploitation/modelos_input/sample_tvt/test
    outs:
      - reports/sentiment_rf_sample/eval

  infer_ulta_top50_albert:
    cmd: >
      python scripts/infer/infer_top_upvoted_ulta.py
      --backend albert
      --input_delta 'data/trusted/ulta_clean/Ulta Skincare Reviews'
      --model_dir models/albert_sample_30pct
      --top_n 50
      --max_len 192
      --batch_size 64
      --output_parquet reports/albert_sample_30pct/ulta_top50/predictions.parquet
      --coalesce 1
      --demote_neutral 1
      --min_neutral_prob 0.90
    deps:
      - scripts/infer/infer_top_upvoted_ulta.py
      - models/albert_sample_30pct
      - 'data/trusted/ulta_clean/Ulta Skincare Reviews'
    outs:
      - reports/albert_sample_30pct/ulta_top50

  infer_ulta_top50_rf:
    cmd: >
      python scripts/infer/infer_top_upvoted_ulta.py
      --backend rf
      --input_delta 'data/trusted/ulta_clean/Ulta Skincare Reviews'
      --model_dir models/sentiment_rf_sample
      --top_n 50
      --output_parquet reports/sentiment_rf_sample/ulta_top50/predictions.parquet
      --coalesce 1
      --demote_neutral 1
      --min_neutral_prob 0.90
      --use_title 1
      --use_extra 1
    deps:
      - scripts/infer/infer_top_upvoted_ulta.py
      - models/sentiment_rf_sample
      - 'data/trusted/ulta_clean/Ulta Skincare Reviews'
    outs:
      - reports/sentiment_rf_sample/ulta_top50

  export_snapshot:
    cmd: >
      python scripts/absa/export_product_info_snapshot.py
      --params params.yaml
    deps:
      - scripts/absa/export_product_info_snapshot.py
      - data/trusted/reviews_product_info_clean_full
      - params.yaml
    outs:
      - data/exploitation/product_info_snapshot.parquet

  build_product_cards:
    cmd: >
      python scripts/absa/build_product_cards.py --params params.yaml
    deps:
      - scripts/absa/build_product_cards.py
      - reports/absa/ate_spans.parquet
      - reports/absa/ate_spans_mapped.parquet
      - reports/albert_sample_30pct/infer_full_pandas/predictions.parquet
      - data/exploitation/product_info_snapshot.parquet
      - params.yaml
    outs:
      - reports/absa/cards/product_cards.jsonl

  absa_insights_altair:
    cmd: >
      python scripts/absa/absa_insights_altair.py --params params.yaml
    deps:
      - scripts/absa/absa_insights_altair.py
      - reports/absa/ate_spans.parquet
      - reports/absa/ate_spans_mapped.parquet
      - reports/albert_sample_30pct/infer_full_pandas/predictions.parquet
      - data/exploitation/product_info_snapshot.parquet
      - params.yaml
    outs:
      - reports/absa/insights/charts

  loves_top10_duckdb:
    cmd: >
      python scripts/absa/top10_loves_duckdb.py --params params.yaml
    deps:
      - scripts/absa/top10_loves_duckdb.py
      - data/trusted/reviews_product_info_clean_full
      - params.yaml
    outs:
      - reports/absa/loves_top10/global_top10.csv
      - reports/absa/loves_top10/per_category_top10.csv

  fetch_product_images:
    cmd: python scripts/absa/fetch_product_images.py --params params.yaml
    deps:
      - scripts/absa/fetch_product_images.py
      - reports/absa/cards/product_cards.jsonl
      - params.yaml
    outs:
      - reports/absa/images/product_images.csv
      - reports/absa/cards/product_cards_with_images.jsonl

  download_product_thumbs:
    cmd: python scripts/absa/download_product_thumbs.py
    deps:
      - scripts/absa/download_product_thumbs.py
      - reports/absa/cards/product_cards_with_images.jsonl
    outs:
      - data/cache/product_images/thumbs
      - reports/absa/images/product_thumbs.csv
  
  
  compute_product_rating_stats:
    cmd: >
      python scripts/absa/compute_product_rating_stats.py
      --input_delta data/trusted/reviews_product_info_clean_full
      --id-col product_id
      --rating-col rating
      --text-col review_text_clean
      --out reports/absa/product_rating_stats.parquet
    deps:
      - scripts/absa/compute_product_rating_stats.py
      - data/trusted/reviews_product_info_clean_full
    outs:
      - reports/absa/product_rating_stats.parquet

  inject_recalculated_ratings:
    cmd: >
      python scripts/absa/inject_recalculated_ratings.py
      --cards-in reports/absa/cards/product_cards_with_images.jsonl
      --stats-parquet reports/absa/product_rating_stats.parquet
      --cards-out reports/absa/cards/product_cards_with_images.recalc.jsonl
    deps:
      - scripts/absa/inject_recalculated_ratings.py
      - reports/absa/cards/product_cards_with_images.jsonl
      - reports/absa/product_rating_stats.parquet
    outs:
      - reports/absa/cards/product_cards_with_images.recalc.jsonl

  make_product_cards_html_recalc:
    cmd: >
      python scripts/absa/make_product_cards_html.py
      --params params.yaml
      --input_jsonl reports/absa/cards/product_cards_with_images.recalc.jsonl
      --output_html reports/absa/cards/product_cards_recalc.html
      --thumbs_dir data/cache/product_images/thumbs
    deps:
      - scripts/absa/make_product_cards_html.py
      - reports/absa/cards/product_cards_with_images.recalc.jsonl
      - params.yaml
    outs:
      - reports/absa/cards/product_cards_recalc.html

  make_product_cards_html:
    cmd: python scripts/absa/make_product_cards_html.py
    deps:
      - scripts/absa/make_product_cards_html.py
      - reports/absa/cards/product_cards_with_images.jsonl
      - data/cache/product_images/thumbs
    outs:
      - reports/absa/cards/product_cards.html

  absa_report:
    cmd: python scripts/absa/make_absa_report.py --params params.yaml
    deps:
      - scripts/absa/make_absa_report.py
      - params.yaml
    outs:
      - reports/absa/final_report/
  build_preview_fused:
    cmd: >
      python scripts/absa/build_preview_fused.py
      --reviews_delta ${build_preview_fused.reviews_delta}
      --ate_mapped_parquet ${build_preview_fused.ate_mapped_parquet}
      --ate_spans_parquet ${build_preview_fused.ate_spans_parquet}
      --sentiment_parquet ${build_preview_fused.sentiment_parquet}
      --output_parquet ${build_preview_fused.output_parquet}
      --coalesce ${build_preview_fused.coalesce}
      --limit_show ${build_preview_fused.limit_show}
    deps:
      - scripts/absa/build_preview_fused.py
      - ${build_preview_fused.reviews_delta}
      - ${build_preview_fused.ate_mapped_parquet}
      - ${build_preview_fused.ate_spans_parquet}
      - ${build_preview_fused.sentiment_parquet}
    outs:
      - ${build_preview_fused.output_parquet}

  aspect_opportunity:
    cmd: >
      python scripts/viz/aspect_opportunity.py
      --preview_parquet ${aspect_opportunity.preview_parquet}
      --products_parquet ${aspect_opportunity.products_parquet}
      --reviews_delta ${aspect_opportunity.reviews_delta}
      --out_dir ${aspect_opportunity.out_dir}
      --bubble_html ${aspect_opportunity.bubble_html}
      --heatmap_html ${aspect_opportunity.heatmap_html}
      --table_csv ${aspect_opportunity.table_csv}
      --category_filter ${aspect_opportunity.category_filter}
      --min_reviews_cell ${aspect_opportunity.min_reviews_cell}
      --min_volume_w ${aspect_opportunity.min_volume_w}
      --top_aspects_bubble ${aspect_opportunity.top_aspects_bubble}
      --top_brands_heatmap ${aspect_opportunity.top_brands_heatmap}
      --weight_cap_pct ${aspect_opportunity.weight_cap_pct}
      --pixels_per_brand ${aspect_opportunity.pixels_per_brand}
      --min_panel_width ${aspect_opportunity.min_panel_width}
    deps:
      - scripts/viz/aspect_opportunity.py
      - ${aspect_opportunity.preview_parquet}
      - ${aspect_opportunity.products_parquet}
      - ${aspect_opportunity.reviews_delta}
    outs:
      - ${aspect_opportunity.bubble_html}
      - ${aspect_opportunity.heatmap_html}
      - ${aspect_opportunity.table_csv}

  priority_tables_simple:
    cmd: >
      python scripts/viz/make_priority_tables_simple.py
      --input_csv ${priority_tables_simple.input_csv}
      --out_dir ${priority_tables_simple.out_dir}
      --thr_excess_high ${priority_tables_simple.thr_excess_high}
      --thr_compl_high ${priority_tables_simple.thr_compl_high}
      --thr_compl_low ${priority_tables_simple.thr_compl_low}
      --thr_quality_high ${priority_tables_simple.thr_quality_high}
      --min_reviews ${priority_tables_simple.min_reviews}
      --min_volume_w ${priority_tables_simple.min_volume_w}
      --top_k_overall ${priority_tables_simple.top_k_overall}
      --top_k_per_cat ${priority_tables_simple.top_k_per_cat}
    deps:
      - scripts/viz/make_priority_tables_simple.py
      - ${priority_tables_simple.input_csv}
    outs:
      - ${priority_tables_simple.out_dir}/simple_top_risks_overall.csv
      - ${priority_tables_simple.out_dir}/simple_top_strengths_overall.csv
      - ${priority_tables_simple.out_dir}/simple_top_risks_by_category.csv
      - ${priority_tables_simple.out_dir}/simple_top_strengths_by_category.csv
      - ${priority_tables_simple.out_dir}/simple_labels_all.csv

  priority_tables:
    cmd: >
      python scripts/viz/make_priority_tables.py
      --input_csv ${priority_tables.input_csv}
      --out_dir ${priority_tables.out_dir}
      --k_conf ${priority_tables.k_conf}
      --bayes_strength ${priority_tables.bayes_strength}
      --top_k_overall ${priority_tables.top_k_overall}
      --top_k_per_cat ${priority_tables.top_k_per_cat}
      --min_reviews ${priority_tables.min_reviews}
      --min_volume_w ${priority_tables.min_volume_w}
    deps:
      - scripts/viz/make_priority_tables.py
      - ${priority_tables.input_csv}
    outs:
      - ${priority_tables.out_dir}/top_risks_overall.csv
      - ${priority_tables.out_dir}/top_strengths_overall.csv
      - ${priority_tables.out_dir}/top_risks_by_category.csv
      - ${priority_tables.out_dir}/top_strengths_by_category.csv

  deep_dive_reviews:
    cmd: >
      python scripts/viz/deep_dive_reviews.py
      --preview_parquet ${deep_dive_reviews.preview_parquet}
      --top_risks_csv ${deep_dive_reviews.top_risks_csv}
      --out_dir ${deep_dive_reviews.out_dir}
      --top_cells ${deep_dive_reviews.top_cells}
      --neg_label ${deep_dive_reviews.neg_label}
      --sample_reviews_per_cell ${deep_dive_reviews.sample_reviews_per_cell}
    deps:
      - scripts/viz/deep_dive_reviews.py
      - ${deep_dive_reviews.preview_parquet}
      - ${deep_dive_reviews.top_risks_csv}
    outs:
      - ${deep_dive_reviews.out_dir}

  ingredients_differential:
    cmd: >
      python scripts/viz/ingredients_differential.py
      --products_parquet ${ingredients_differential.products_parquet}
      --top_risks_csv ${ingredients_differential.top_risks_csv}
      --out_dir ${ingredients_differential.out_dir}
      --top_cells ${ingredients_differential.top_cells}
      --top_terms ${ingredients_differential.top_terms}
    deps:
      - scripts/viz/ingredients_differential.py
      - ${ingredients_differential.products_parquet}
      - ${ingredients_differential.top_risks_csv}
    outs:
      - ${ingredients_differential.out_dir}

  viz_box_from_preview:
    cmd: >
      python scripts/viz/viz_box_from_preview.py
      --input_parquet ${viz_box_from_preview.input_parquet}
      --output_html ${viz_box_from_preview.output_html}
      --metric ${viz_box_from_preview.metric}
      --category_filter ${viz_box_from_preview.category_filter}
      --min_n_per_cell ${viz_box_from_preview.min_n_per_cell}
      --max_aspects ${viz_box_from_preview.max_aspects}
      --max_rows ${viz_box_from_preview.max_rows}
      --pixels_per_brand ${viz_box_from_preview.pixels_per_brand}
      --panel_height ${viz_box_from_preview.panel_height}
    deps:
      - scripts/viz/viz_box_from_preview.py
      - ${viz_box_from_preview.input_parquet}
    outs:
      - ${viz_box_from_preview.output_html}

  viz_ridge_from_preview:
    cmd: >
      python scripts/viz/viz_ridge_from_preview.py
      --input_parquet ${viz_ridge_from_preview.input_parquet}
      --output_html ${viz_ridge_from_preview.output_html}
      --metric ${viz_ridge_from_preview.metric}
      --category_filter ${viz_ridge_from_preview.category_filter}
      --min_n_per_cell ${viz_ridge_from_preview.min_n_per_cell}
      --max_aspects ${viz_ridge_from_preview.max_aspects}
      --max_brands_per_aspect ${viz_ridge_from_preview.max_brands_per_aspect}
      --extent_lo ${viz_ridge_from_preview.extent_lo}
      --extent_hi ${viz_ridge_from_preview.extent_hi}
    deps:
      - scripts/viz/viz_ridge_from_preview.py
      - ${viz_ridge_from_preview.input_parquet}
    outs:
      - ${viz_ridge_from_preview.output_html}

  viz_violin_secondary_rating:
    cmd: >
      python scripts/viz/viz_violin_secondary_rating.py
      --input_parquet ${viz_violin_secondary_rating.input_parquet}
      --output_html ${viz_violin_secondary_rating.output_html}
      --metric ${viz_violin_secondary_rating.metric}
      --category_filter ${viz_violin_secondary_rating.category_filter}
      --min_reviews_per_cat ${viz_violin_secondary_rating.min_reviews_per_cat}
      --max_categories ${viz_violin_secondary_rating.max_categories}
      --per_cat_width ${viz_violin_secondary_rating.per_cat_width}
      --row_height ${viz_violin_secondary_rating.row_height}
      --bandwidth ${viz_violin_secondary_rating.bandwidth}
      --bins ${viz_violin_secondary_rating.bins}
      --dedup_reviews ${viz_violin_secondary_rating.dedup_reviews}
  viz_market_brand_panel:
    cmd: >
      python scripts/viz/viz_market_brand_panel.py
      --input_parquet ${viz_market_brand_panel.input_parquet}
      --products_parquet ${viz_market_brand_panel.products_parquet}
      --reviews_delta ${viz_market_brand_panel.reviews_delta}
      --output_html_sticky ${viz_market_brand_panel.output_html_sticky}
      --metric ${viz_market_brand_panel.metric}
      --dedup_reviews ${viz_market_brand_panel.dedup_reviews}
      --min_reviews_per_cat ${viz_market_brand_panel.min_reviews_per_cat}
      --max_categories ${viz_market_brand_panel.max_categories}
      --bins ${viz_market_brand_panel.bins}
      --bandwidth ${viz_market_brand_panel.bandwidth}
      --jitter_sigma ${viz_market_brand_panel.jitter_sigma}
      --market_width ${viz_market_brand_panel.market_width}
      --market_height ${viz_market_brand_panel.market_height}
      --brand_width ${viz_market_brand_panel.brand_width}
      --brand_height ${viz_market_brand_panel.brand_height}
      --brand_cols ${viz_market_brand_panel.brand_cols}
      --top_brands_per_cat ${viz_market_brand_panel.top_brands_per_cat}
    deps:
      - scripts/viz/viz_market_brand_panel.py
      - ${viz_market_brand_panel.input_parquet}
      - ${viz_market_brand_panel.products_parquet}
      - ${viz_market_brand_panel.reviews_delta}
    outs:
      - ${viz_market_brand_panel.output_html_sticky}
  viz_market_brand_bubbles:
    cmd: >
      python scripts/viz/viz_market_brand_bubbles.py
      --input_parquet ${viz_market_brand_bubbles.input_parquet}
      --products_parquet ${viz_market_brand_bubbles.products_parquet}
      --reviews_delta ${viz_market_brand_bubbles.reviews_delta}
      --secondary_map_parquet ${viz_market_brand_bubbles.secondary_map_parquet}
      --output_html ${viz_market_brand_bubbles.output_html}
      --dedup_reviews ${viz_market_brand_bubbles.dedup_reviews}
      --min_reviews_per_cat ${viz_market_brand_bubbles.min_reviews_per_cat}
      --max_categories ${viz_market_brand_bubbles.max_categories}
      --weight_cap_pct ${viz_market_brand_bubbles.weight_cap_pct}
      --top_products ${viz_market_brand_bubbles.top_products}
    deps:
      - scripts/viz/viz_market_brand_bubbles.py
      - ${viz_market_brand_bubbles.input_parquet}
      - ${viz_market_brand_bubbles.products_parquet}
      - ${viz_market_brand_bubbles.reviews_delta}
    outs:
      - ${viz_market_brand_bubbles.output_html}

  link_top10_cards:
    cmd: >
      python scripts/viz/link_top10_cards.py
      --per_category_csv ${loves_top10.per_category_csv}
      --global_csv ${loves_top10.global_csv}
      --products_parquet ${loves_top10.products_parquet}
      --cards_dir ${loves_top10.cards_dir}
      --thumbs_dir ${loves_top10.thumbs_dir}
      --out_html ${loves_top10.out_html}
      --card_pattern ${loves_top10.card_pattern}
    deps:
      - scripts/viz/link_top10_cards.py
      - ${loves_top10.per_category_csv}
      - ${loves_top10.global_csv}
      - ${loves_top10.products_parquet}
    outs:
      - ${loves_top10.out_html}

  cards_index_filters_recalc_wfilters:
    cmd: >
      python scripts/viz/cards_index_with_filters.py
      --products_parquet ${cards_index.products_parquet}
      --cards_dir ${cards_index.cards_dir}
      --thumbs_dir ${cards_index.thumbs_dir}
      --out_html ${cards_index.recalc_out_html_wfilters}
      --card_pattern ${cards_index.card_pattern}
    deps:
      - scripts/viz/cards_index_with_filters.py
      - ${cards_index.products_parquet}
    outs:
      - ${cards_index.recalc_out_html_wfilters}